@PART[*]:HAS[@MODULE[ModuleLight],!MODULE[TestFlightCore]]:AFTER[TestFlight]
{
	MODULE
	{
		name = TestFlightInterop
	}
	MODULE
	{
		name = TestFlightCore
		startFlightData = 0
		maxData = 10000
	}
	MODULE
	{
		name = FlightDataRecorder_Lights
		flightDataEngineerModifier = 0.25
		flightDataMultiplier = 10
	}
	MODULE
	{
		name = TestFlightReliability_TestFail
		reliabilityCurve
		{
			key = 0 0.005
			key = 10000 0.002
		}
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_LightBroken
		weight = 32
		failureType = hardware
		failureTitle = Bulb broken
		duRepair = 250
		duFail = 100
		severity = failure
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_LightFlicker
		minFlickerTime = 0.1
		maxFlickerTime = 0.4
		weight = 32
		failureType = hardware
		failureTitle = Bulb shorting out
		duRepair = 250
		duFail = 100
		severity = minor
	}
}
@PART[*]:HAS[@MODULE[ModuleAblator],!MODULE[TestFlightCore]]:AFTER[TestFlight]
{
	MODULE
	{
		name = TestFlightInterop
	}
	MODULE
	{
		name = TestFlightCore	
		startFlightData = 0
		maxData = 10000
	}
	MODULE
	{
		name = FlightDataRecorder_HeatShield
		flightDataEngineerModifier = 0.25
		flightDataMultiplier = 10
	}
	MODULE
	{
		name = TestFlightReliability
		reliabilityCurve
		{
			key = 0 0.005
			key = 10000 0.002
		}
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_AblatorCover
		weight = 32
		failureType = hardware
		failureTitle = Ablator cracked
		duRepair = 250
		duFail = 100
		severity = minor
		//percent of heatshield surface area lost upon failure
		//this failure can repeat itself
		oneShot = True
		minDegradation = 5
		maxDegradation = 10
	}
}
@PART[*]:HAS[@MODULE[ModuleReactionWheel],!MODULE[TestFlightCore]]:AFTER[TestFlight]
{
	MODULE
	{
		name = TestFlightInterop
	}
	MODULE
	{
		name = TestFlightCore
		startFlightData = 0
		maxData = 10000
	}
	MODULE
	{
		name = FlightDataRecorder_ReactionWheel
		flightDataEngineerModifier = 0.25
		flightDataMultiplier = 5
	}
	MODULE
	{
		name = TestFlightReliability
		reliabilityCurve
		{
			key = 0 0.0002
			key = 10000 0.00008
		}
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_ReactionBroken
		weight = 16
		failureType = mechanical
		failureTitle = Motor burned out
		duRepair = 50
		duFail = 100
		severity = failure
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_ReactionTorque
		weight = 32
		failureType = hardware
		failureTitle = Short circuit
		duRepair = 250
		duFail = 100
		severity = severe
	}
}
@PART[*]:HAS[@MODULE[ModuleDeployableSolarPanel],!MODULE[TestFlightCore]]
{
	MODULE
	{
		name = TestFlightInterop
	}
	MODULE
	{
		name = TestFlightCore
		startFlightData = 0
		maxData = 10000
	}
	MODULE
	{
		name = FlightDataRecorder_Solar
		flightDataEngineerModifier = 0.25
		flightDataMultiplier = 5
	}
	MODULE
	{
		name = TestFlightReliability
		reliabilityCurve
		{
			key = 0 0.0002
			key = 10000 0.00008
		}
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = False
			canBeRepairedOnSplashed = False
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_SolarMech
		weight = 16
		failureType = hardware
		failureTitle = Loose hinge
		duRepair = 50
		duFail = 100
		severity = failure
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_SolarTracking
		weight = 32
		failureType = mechanical
		failureTitle = Motor burned out
		duRepair = 250
		duFail = 100
		severity = severe
	}
}
@PART[*]:HAS[@MODULE[ModuleWheel],!MODULE[TestFlightCore]]:AFTER[TestFlight]
{
	MODULE
	{
		name = TestFlightInterop
	}
	MODULE
	{
		name = TestFlightCore
		startFlightData = 0
		maxData = 10000
	}
	MODULE
	{
		name = FlightDataRecorder_Wheels
		flightDataEngineerModifier = 0.25
		flightDataMultiplier = 5
	}
	MODULE
	{
		name = TestFlightReliability
		reliabilityCurve
		{
			key = 0 0.0002
			key = 10000 0.00008
		}
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = False
			canBeRepairedOnSplashed = False
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_WheelBrake
		weight = 16
		failureType = hardware
		failureTitle = Brake pedal broken
		duRepair = 50
		duFail = 100
		severity = major
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_WheelSteer
		weight = 32
		failureType = mechanical
		failureTitle = Steering jammed
		duRepair = 250
		duFail = 100
		severity = severe
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = False
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_WheelMotor
		weight = 32
		failureType = mechanical
		failureTitle = Motor burned out
		duRepair = 250
		duFail = 100
		severity = failure
	}
}
//prevents experiment being used until repaired
@PART[*]:HAS[@MODULE[ModuleScienceExperiment]:HAS[~experimentID[evaReport],~experimentID[crewReport],~experimentID[surfaceSample],~experimentID[asteroidSample]]]:FOR[TestFlight]
{
	MODULE
	{
		name = TestFlightInterop
	}
	MODULE
	{
		name = TestFlightCore
		startFlightData = 0
		maxData = 10000
	}
	MODULE
	{
		name = FlightDataRecorder_Science
		flightDataEngineerModifier = 0
		flightDataMultiplier = 2
	}
	MODULE
	{
		name = TestFlightReliability
		reliabilityCurve
		{
			key = 0 0.005
			key = 10000 0.002
		}
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_ScienceBroken
		weight = 8
		failureType = hardware
		failureTitle = Seal cracked
		duRepair = 250
		duFail = 100
		severity = failure
	}
}
@PART[*]:HAS[@MODULE[ModuleRTAntenna]]:FOR[TestFlight]
{
	MODULE
	{
		name = TestFlightInterop
	}
	MODULE
	{
		name = TestFlightCore
		startFlightData = 0
		maxData = 10000
	}
	MODULE
	{
		name = FlightDataRecorder_RT
		flightDataEngineerModifier = 0
		flightDataMultiplier = 2
	}
	MODULE
	{
		name = TestFlightReliability
		reliabilityCurve
		{
			key = 0 0.005
			key = 10000 0.002
		}
	}
	MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_RemoteBroken
		weight = 8
		failureType = hardware
		failureTitle = Circuits fried
		duRepair = 250
		duFail = 100
		severity = failure
	}
}
@PART[*]:HAS[@MODULE[FARControllableSurface]]:FOR[TestFlight]
{
	MODULE
	{
		name = TestFlightInterop
	}
	MODULE
	{
		name = TestFlightCore
		startFlightData = 0
		maxData = 10000
	}
	MODULE
	{
		name = FlightDataRecorder
		flightDataEngineerModifier = 0
		flightDataMultiplier = 1
	}
	MODULE
	{
		name = TestFlightReliability
		reliabilityCurve
		{
			key = 0 0.0005
			key = 10000 0.0002
		}
	}
	MODULE
	{ //USE ON FLAPS PARTS glitches flaps to a position
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_FARCtrlSrfGlitch
		weight = 8
		failureType = mechanical
		failureTitle = Flaps jammed
		duRepair = 250
		duFail = 100
		severity = failure
	}
		MODULE
	{
		REPAIR
		{
			canBeRepairedInFlight = True
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = False
			repairChance = 75
		}
		name = TestFlightFailure_FARCtrlSrfMech
		weight = 8
		failureType = hardware
		failureTitle = Control loss
		duRepair = 250
		duFail = 100
		severity = failure
	}
}
