@PART[*]:HAS[@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!MODULE[ModuleCommand]]:FINAL
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 5
        flightDataEngineerModifier = 0.10
        emptyThreshold = 0.1
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 100
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 98
        }
    }
    MODULE
    {
        name = TestFlightFailure_ResourceLeak
        failureTitle = Oxidizer Leak
        failureType = mechanical
        severity = failure
        resourceToLeak = Oxidizer
        initialAmount = 10
        perSecondAmount = 1
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = False
            requiresEVA = False
            replacementPart = FuelLine
            replacementPartOptional = True
            replacementPartBonus = 0.10
            repairChance = 80
        }
    }
    MODULE
    {
        name = TestFlightFailure_ResourceLeak
        failureTitle = Liquid Fuel Leak
        failureType = mechanical
        severity = failure
        resourceToLeak = LiquidFuel
        initialAmount = 10
        perSecondAmount = 1
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = False
            requiresEVA = False
            replacementPart = FuelLine
            replacementPartOptional = True
            replacementPartBonus = 0.10
            repairChance = 80
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}
@PART[*]:HAS[@RESOURCE[LiquidFuel,!RESOURCE[Oxidizer]],!MODULE[ModuleCommand]]:FINAL
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 5
        flightDataEngineerModifier = 0.10
        emptyThreshold = 0.1
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 100
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 98
        }
    }
    MODULE
    {
        name = TestFlightFailure_ResourceLeak
        failureTitle = Liquid Fuel Leak
        failureType = mechanical
        severity = failure
        resourceToLeak = LiquidFuel
        initialAmount = 10
        perSecondAmount = 1
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = False
            requiresEVA = False
            replacementPart = FuelLine
            replacementPartOptional = True
            replacementPartBonus = 0.10
            repairChance = 80
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}
@PART[*]:HAS[@RESOURCE[MonoPropellant],!MODULE[ModuleCommand]]:FOR[TestFlight]:FINAL
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 8
        flightDataEngineerModifier = 0.15
        emptyThreshold = 0
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 100
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 98
        }
    }
    MODULE
    {
        name = TestFlightFailure_ResourceLeak
        failureTitle = MonoPropellant Leak
        failureType = mechanical
        severity = failure
        resourceToLeak = MonoPropellant
        initialAmount = 1
        perSecondAmount = 0.1
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = False
            requiresEVA = False
            replacementPart = FuelLine
            replacementPartOptional = True
            replacementPartBonus = 0.10
            repairChance = 80
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}
@PART[*]:HAS[@RESOURCE[XenonGas],!MODULE[ModuleCommand]]:FOR[TestFlight]:FINAL
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 8
        flightDataEngineerModifier = 0.15
        emptyThreshold = 0
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 100
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 98
        }
    }
    MODULE
    {
        name = TestFlightFailure_ResourceLeak
        failureTitle = XenonGas Leak
        failureType = mechanical
        severity = failure
        resourceToLeak = XenonGas
        initialAmount = 10
        perSecondAmount = 2
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = False
            requiresEVA = False
            replacementPart = FuelLine
            replacementPartOptional = True
            replacementPartBonus = 0.10
            repairChance = 80
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}