@PART[fuelTankSmallFlat]:AFTER[Squad]
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
    	// Because this recorder is "always on" we have a much lower rate of data collection
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 2
        flightDataEngineerModifier = 0.05
        emptyThreshold = 0
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 98
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 95
        }
    }
    MODULE
    {
        name = TestFlightFailure_FuelLeak
        failureTitle = Fuel Leak
        failureType = mechanical
        severity = failure
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = True
            requiresEVA = False
            sparePartsRequired = 10
            // For SOFTWARE failures
            // canBeRepairedByRemote
            // dataScale
            // dataSize
            // For all failures
            repairChance = 100
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}

@PART[fuelTankSmall]:AFTER[Squad]
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
    	// Because this recorder is "always on" we have a much lower rate of data collection
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 2
        flightDataEngineerModifier = 0.05
        emptyThreshold = 0
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 98
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 95
        }
    }
    MODULE
    {
        name = TestFlightFailure_FuelLeak
        failureTitle = Fuel Leak
        failureType = mechanical
        severity = failure
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = True
            requiresEVA = False
            sparePartsRequired = 10
            // For SOFTWARE failures
            // canBeRepairedByRemote
            // dataScale
            // dataSize
            // For all failures
            repairChance = 100
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}

@PART[fuelTank]:AFTER[Squad]
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
    	// Because this recorder is "always on" we have a much lower rate of data collection
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 2
        flightDataEngineerModifier = 0.05
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 98
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 95
        }
    }
    MODULE
    {
        name = TestFlightFailure_FuelLeak
        failureTitle = Fuel Leak
        failureType = mechanical
        severity = failure
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = True
            requiresEVA = False
            sparePartsRequired = 10
            // For SOFTWARE failures
            // canBeRepairedByRemote
            // dataScale
            // dataSize
            // For all failures
            repairChance = 100
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}

@PART[fuelTank_Long]:AFTER[Squad]
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
    	// Because this recorder is "always on" we have a much lower rate of data collection
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 2
        flightDataEngineerModifier = 0.05
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 98
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 95
        }
    }
    MODULE
    {
        name = TestFlightFailure_FuelLeak
        failureTitle = Fuel Leak
        failureType = mechanical
        severity = failure
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = True
            requiresEVA = False
            sparePartsRequired = 10
            // For SOFTWARE failures
            // canBeRepairedByRemote
            // dataScale
            // dataSize
            // For all failures
            repairChance = 100
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}

@PART[fuelTank4-2]:AFTER[Squad]
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
    	// Because this recorder is "always on" we have a much lower rate of data collection
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 2
        flightDataEngineerModifier = 0.05
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 98
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 95
        }
    }
    MODULE
    {
        name = TestFlightFailure_FuelLeak
        failureTitle = Fuel Leak
        failureType = mechanical
        severity = failure
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = True
            requiresEVA = False
            sparePartsRequired = 10
            // For SOFTWARE failures
            // canBeRepairedByRemote
            // dataScale
            // dataSize
            // For all failures
            repairChance = 100
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}

@PART[fuelTank2-2]:AFTER[Squad]
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
    	// Because this recorder is "always on" we have a much lower rate of data collection
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 2
        flightDataEngineerModifier = 0.05
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 98
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 95
        }
    }
    MODULE
    {
        name = TestFlightFailure_FuelLeak
        failureTitle = Fuel Leak
        failureType = mechanical
        severity = failure
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = True
            requiresEVA = False
            sparePartsRequired = 10
            // For SOFTWARE failures
            // canBeRepairedByRemote
            // dataScale
            // dataSize
            // For all failures
            repairChance = 100
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}

@PART[fuelTank1-2]:AFTER[Squad]
{
    MODULE
    {
        name = TestFlightCore
        pollingInterval = 0
        failureCheckFrequency = 0
    }
    MODULE
    {
    	// Because this recorder is "always on" we have a much lower rate of data collection
        name = FlightDataRecorder_Resources
        flightDataMultiplier = 2
        flightDataEngineerModifier = 0.05
    }
    MODULE
    {
        name = TestFlightReliability
        reliabilityFactor = 2
        reliabilityMultipler = 3
        RELIABILITY_BODY
        {
            scope = kerbin_atmosphere
            minReliability = 80
            maxReliability = 98
        }
        RELIABILITY_BODY
        {
            scope = kerbin_space
            minReliability = 35
            maxReliability = 95
        }
    }
    MODULE
    {
        name = TestFlightFailure_FuelLeak
        failureTitle = Fuel Leak
        failureType = mechanical
        severity = failure
        // ** PLEASE USE ONLY THESE WEIGHTS **
        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part
        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common
        weight = 32
        REPAIR
        {
        	// For PHYSICAL failures
            canBeRepairedOnLanded = True
            canBeRepairedOnSplashed = False
            canBeRepairedInFlight = True
            requiresEVA = False
            sparePartsRequired = 10
            // For SOFTWARE failures
            // canBeRepairedByRemote
            // dataScale
            // dataSize
            // For all failures
            repairChance = 100
        }
    }
	MODULE
	{
		name = TestFlightFailure_Explode
		failureTitle = Part Exploded!
		failureType = mechanical
		severity = major
		weight = 2
	}
}
